<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Pelago\Emogrifier" namespace="Pelago" name="Emogrifier" abstract="false" final="false" start="13" end="901">
  <file path="/var/www/_modules/newsletter_emogrify/trunk/docs/en/phpdox/../../../thirdparty/source/Classes" file="Emogrifier.php" realpath="/var/www/_modules/newsletter_emogrify/trunk/thirdparty/source/Classes/Emogrifier.php" size="29026" time="2015-03-14T10:38:37+13:00" unixtime="1426282717" sha1="d1474b74ee25c89a8040bf5d45230d07f2c5b892" relative="thirdparty/source/Classes/Emogrifier.php"/>
  <docblock>
    <description compact="This class provides functions for converting CSS styles into inline style attributes in your HTML code.">For more information, please see the README.md file.</description>
    <author value="Cameron Brooks"/>
    <author value="Jaime Prado"/>
    <author value="Roman OÅ¾ana &lt;ozana@omdesign.cz&gt;"/>
  </docblock>
  <constant name="ENCODING" value="'UTF-8'">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant name="CACHE_KEY_CSS" value="0">
    <docblock>
      <description/>
      <var type="int"/>
    </docblock>
  </constant>
  <constant name="CACHE_KEY_SELECTOR" value="1">
    <docblock>
      <description/>
      <var type="int"/>
    </docblock>
  </constant>
  <constant name="CACHE_KEY_XPATH" value="2">
    <docblock>
      <description/>
      <var type="int"/>
    </docblock>
  </constant>
  <constant name="CACHE_KEY_CSS_DECLARATION_BLOCK" value="3">
    <docblock>
      <description/>
      <var type="int"/>
    </docblock>
  </constant>
  <constant name="INDEX" value="0">
    <docblock>
      <description compact="for calculating nth-of-type and nth-child selectors"/>
      <var type="int"/>
    </docblock>
  </constant>
  <constant name="MULTIPLIER" value="1">
    <docblock>
      <description compact="for calculating nth-of-type and nth-child selectors"/>
      <var type="int"/>
    </docblock>
  </constant>
  <constant name="ID_ATTRIBUTE_MATCHER" value="'/(\\w+)?\\#([\\w\\-]+)/'">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </constant>
  <constant name="CLASS_ATTRIBUTE_MATCHER" value="'/(\\w+|[\\*\\]])?((\\.[\\w\\-]+)+)/'">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </constant>
  <member name="html" type="string" default="''" visibility="private" line="67">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="css" type="string" default="''" visibility="private" line="72">
    <docblock>
      <description/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="unprocessableHtmlTags" type="array" visibility="private" line="77">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </var>
    </docblock>
  </member>
  <member name="caches" type="array" visibility="private" line="82">
    <docblock>
      <description/>
      <var type="array" of="object">
        <type full="Pelago\array" namespace="Pelago" name="array"/>
      </var>
    </docblock>
  </member>
  <member name="visitedNodes" type="array" visibility="private" line="94">
    <docblock>
      <description compact="the visited nodes with the XPath paths as array keys"/>
      <var type="array" of="object">
        <type full="\DOMNode" namespace="" name="DOMNode"/>
      </var>
    </docblock>
  </member>
  <member name="styleAttributesForNodes" type="array" visibility="private" line="102">
    <docblock>
      <description compact="the styles to apply to the nodes with the XPath paths as array keys for the outer array and the attribute names/values as key/value pairs for the inner array"/>
      <var type="array" of="object">
        <type full="Pelago\array" namespace="Pelago" name="array"/>
      </var>
    </docblock>
  </member>
  <member name="preserveEncoding" type="{unknown}" default="false" visibility="public" line="118">
    <docblock>
      <description compact="This attribute applies to the case where you want to preserve your original text encoding.">By default, emogrifier translates your text into HTML entities for two reasons:

1. Because of client incompatibilities, it is better practice to send out HTML entities
   rather than unicode over email.

2. It translates any illegal XML characters that DOMDocument cannot work with.

If you would like to preserve your original encoding, set this attribute to true.</description>
      <var type="object">
        <type full="Pelago\bool" namespace="Pelago" name="bool"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="126" end="130" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The constructor."/>
      <param description="the HTML to emogrify, must be UTF-8-encoded" type="string" variable="$html"/>
      <param description="the CSS to merge, must be UTF-8-encoded" type="string" variable="$css"/>
    </docblock>
    <parameter name="html" byreference="false" type="string" default="''"/>
    <parameter name="css" byreference="false" type="string" default="''"/>
  </constructor>
  <destructor name="__destruct" start="135" end="138" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The destructor."/>
    </docblock>
  </destructor>
  <method name="setHtml" start="147" end="150" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the HTML to emogrify."/>
      <param description="the HTML to emogrify, must be UTF-8-encoded" type="string" variable="$html"/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
    <parameter name="html" byreference="false" type="{unknown}"/>
  </method>
  <method name="setCss" start="159" end="162" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets the CSS to merge with the HTML."/>
      <param description="the CSS to merge, must be UTF-8-encoded" type="string" variable="$css"/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
    <parameter name="css" byreference="false" type="{unknown}"/>
  </method>
  <method name="emogrify" start="173" end="317" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Applies the CSS you submit to the HTML you submit.">This method places the CSS inline.</description>
      <return type="string"/>
      <throws type="object">
        <type full="\BadMethodCallException" namespace="" name="BadMethodCallException"/>
      </throws>
    </docblock>
    <inline>
      <comment value="Before be begin processing the CSS file, parse the document and normalize all existing CSS attributes." line="183"/>
      <comment value="This changes 'DISPLAY: none' to 'display: none'." line="184"/>
      <comment value="We wouldn't have to do this if DOMXPath supported XPath 2.0." line="185"/>
      <comment value="Also store a reference of nodes with existing inline styles so we don't overwrite them." line="186"/>
      <comment value="in order to not overwrite existing style attributes in the HTML, we have to save" line="201"/>
      <comment value="the original HTML styles" line="202"/>
      <comment value="grab any existing style blocks from the html and append them to the existing CSS" line="215"/>
      <comment value="(these blocks should be appended so as to have precedence over conflicting styles in the existing CSS)" line="216"/>
      <comment value="process the CSS file for selectors and definitions" line="225"/>
      <comment value="if there is a blank definition, skip" line="230"/>
      <comment value="else split by commas and duplicate attributes so we can sort by selector precedence" line="235"/>
      <comment value="don't process pseudo-elements and behavioral (dynamic) pseudo-classes;" line="238"/>
      <comment value="only allow structural pseudo-classes" line="239"/>
      <comment value="now sort the selectors by precedence" line="254"/>
      <comment value="query the body for the xpath selector" line="261"/>
      <comment value="if it has a style attribute, get it, process it, and append (overwrite) new stuff" line="266"/>
      <comment value="break it up into an associative array" line="268"/>
      <comment value="now iterate through the nodes that contained inline styles in the original HTML" line="281"/>
      <comment value="This removes styles from your email that contain display:none." line="291"/>
      <comment value="We need to look for display:none, but we need to do a case-insensitive search. Since DOMDocument only" line="292"/>
      <comment value="supports XPath 1.0, lower-case() isn't available to us. We've thus far only set attributes to lowercase," line="293"/>
      <comment value="not attribute values. Consequently, we need to translate() the letters that would be in 'NONE' (&quot;NOE&quot;)" line="294"/>
      <comment value="to lowercase." line="295"/>
      <comment value="The checks on parentNode and is_callable below ensure that if we've deleted the parent node," line="299"/>
      <comment value="we don't try to call removeChild on a nonexistent child node" line="300"/>
    </inline>
  </method>
  <method name="clearAllCaches" start="324" end="330" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Clears all caches."/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="clearCache" start="342" end="355" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Clears a single cache by key."/>
      <param description="the cache key, must be CACHE_KEY_CSS, CACHE_KEY_SELECTOR, CACHE_KEY_XPATH" type="int" variable="$key">or CACHE_KEY_CSS_DECLARATION_BLOCK</param>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
      <throws type="object">
        <type full="\InvalidArgumentException" namespace="" name="InvalidArgumentException"/>
      </throws>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="purgeVisitedNodes" start="362" end="366" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Purges the visited nodes."/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
  </method>
  <method name="addUnprocessableHtmlTag" start="380" end="383" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Marks a tag for removal.">There are some HTML tags that DOMDocument cannot process, and it will throw an error if it encounters them.
In particular, DOMDocument will complain if you try to use HTML5 tags in an XHTML document.

Note: The tags will not be removed if they have any content.</description>
      <param description="the tag name, e.g., &quot;p&quot;" type="string" variable="$tagName"/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
    <parameter name="tagName" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeUnprocessableHtmlTag" start="392" end="398" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Drops a tag from the removal list."/>
      <param description="the tag name, e.g., &quot;p&quot;" type="string" variable="$tagName"/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
    <parameter name="tagName" byreference="false" type="{unknown}"/>
  </method>
  <method name="generateStyleStringFromDeclarationsArrays" start="411" end="419" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="This method merges old or existing name/value array with new name/value array and then generates a string of the combined style suitable for placing inline.">This becomes the single point for CSS string generation allowing for consistent
CSS output no matter where the CSS originally came from.</description>
      <param type="array" variable="$oldStyles" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <param type="array" variable="$newStyles" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="oldStyles" byreference="false" type="array"/>
    <parameter name="newStyles" byreference="false" type="array"/>
  </method>
  <method name="copyCssWithMediaToStyleNode" start="430" end="435" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Copies the media part from CSS array parts to $xmlDocument."/>
      <param type="array" variable="$cssParts" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <param type="object" variable="$xmlDocument">
        <type full="\DOMDocument" namespace="" name="DOMDocument"/>
      </param>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
    <parameter name="cssParts" byreference="false" type="array"/>
    <parameter name="xmlDocument" byreference="false" type="object">
      <type full="DOMDocument" namespace="" name="DOMDocument"/>
    </parameter>
  </method>
  <method name="getCssFromAllStyleNodes" start="444" end="460" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns CSS content."/>
      <param type="object" variable="$xpath">
        <type full="\DOMXPath" namespace="" name="DOMXPath"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="xpath" byreference="false" type="object">
      <type full="DOMXPath" namespace="" name="DOMXPath"/>
    </parameter>
  </method>
  <method name="addStyleElementToDocument" start="474" end="483" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Adds a style element with $css to $document.">This method is protected to allow overriding.</description>
      <see value="https://github.com/jjriv/emogrifier/issues/103"/>
      <param type="object" variable="$document">
        <type full="\DOMDocument" namespace="" name="DOMDocument"/>
      </param>
      <param type="string" variable="$css"/>
      <return type="object">
        <type full="Pelago\void" namespace="Pelago" name="void"/>
      </return>
    </docblock>
    <parameter name="document" byreference="false" type="object">
      <type full="DOMDocument" namespace="" name="DOMDocument"/>
    </parameter>
    <parameter name="css" byreference="false" type="{unknown}"/>
  </method>
  <method name="getOrCreateHeadElement" start="492" end="503" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns the existing or creates a new head element in $document."/>
      <param type="object" variable="$document">
        <type full="\DOMDocument" namespace="" name="DOMDocument"/>
      </param>
      <return description="the head element" type="object">
        <type full="\DOMNode" namespace="" name="DOMNode"/>
      </return>
    </docblock>
    <parameter name="document" byreference="false" type="object">
      <type full="DOMDocument" namespace="" name="DOMDocument"/>
    </parameter>
  </method>
  <method name="splitCssAndMediaQuery" start="526" end="558" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Splits input CSS code to an array where:">- key "css" will be contains clean CSS code
- key "media" will be contains all valuable media queries

Example:

The CSS code

  "@import "file.css"; h1 { color:red; } @media { h1 {}} @media tv { h1 {}}"

will be parsed into the following array:

  "css" =&gt; "h1 { color:red; }"
  "media" =&gt; "@media { h1 {}}"</description>
      <param type="string" variable="$css"/>
      <return type="array" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </return>
    </docblock>
    <parameter name="css" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="filter the CSS" line="538"/>
      <comment value="clean CSS before output" line="554"/>
    </inline>
  </method>
  <method name="createXmlDocument" start="565" end="578" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a DOMDocument instance with the current HTML."/>
      <return type="object">
        <type full="\DOMDocument" namespace="" name="DOMDocument"/>
      </return>
    </docblock>
  </method>
  <method name="getUnifiedHtml" start="588" end="602" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Returns the HTML with the non-ASCII characters converts into HTML entities and the unprocessable HTML tags removed."/>
      <return description="the unified HTML" type="string"/>
      <throws type="object">
        <type full="\BadMethodCallException" namespace="" name="BadMethodCallException"/>
      </throws>
    </docblock>
  </method>
  <method name="sortBySelectorPrecedence" start="610" end="620" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$a" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <param type="array" variable="$b" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="int"/>
    </docblock>
    <parameter name="a" byreference="false" type="array"/>
    <parameter name="b" byreference="false" type="array"/>
    <inline>
      <comment value="We want these sorted in ascending order so selectors with lesser precedence get processed first and" line="615"/>
      <comment value="selectors with greater precedence get sorted last." line="616"/>
    </inline>
  </method>
  <method name="getCssSelectorPrecedence" start="627" end="649" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="string" variable="$selector"/>
      <return type="int"/>
    </docblock>
    <parameter name="selector" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="ids: worth 100, classes: worth 10, elements: worth 1" line="633"/>
    </inline>
  </method>
  <method name="translateCssToXpath" start="660" end="732" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Right now, we support all CSS 1 selectors and most CSS2/3 selectors."/>
      <see value="http://plasmasturm.org/log/444/"/>
      <param type="string" variable="$paramCssSelector"/>
      <return type="string"/>
    </docblock>
    <parameter name="paramCssSelector" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="returns an Xpath selector" line="673"/>
      <comment value="Advanced selectors are going to require a bit more advanced emogrification." line="716"/>
      <comment value="When we required PHP 5.3, we could do this with closures." line="717"/>
    </inline>
  </method>
  <method name="matchIdAttributes" start="739" end="742" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$match" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="match" byreference="false" type="array"/>
  </method>
  <method name="matchClassAttributes" start="749" end="756" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$match" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="match" byreference="false" type="array"/>
  </method>
  <method name="translateNthChild" start="763" end="787" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$match" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="match" byreference="false" type="array"/>
  </method>
  <method name="translateNthOfType" start="794" end="818" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$match" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="match" byreference="false" type="array"/>
  </method>
  <method name="parseNth" start="825" end="859" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description/>
      <param type="array" variable="$match" of="object">
        <type full="Pelago\string" namespace="Pelago" name="string"/>
      </param>
      <return type="array" of="object">
        <type full="Pelago\int" namespace="Pelago" name="int"/>
      </return>
    </docblock>
    <parameter name="match" byreference="false" type="array"/>
  </method>
  <method name="parseCssDeclarationBlock" start="880" end="900" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Parses a CSS declaration block into property name/value pairs.">Example:

The declaration block

  "color: #000; font-weight: bold;"

will be parsed into the following array:

  "color" =&gt; "#000"
  "font-weight" =&gt; "bold"</description>
      <param description="the CSS declaration block without the curly braces, may be empty" type="string" variable="$cssDeclarationBlock"/>
      <return type="array" of="object">the CSS declarations with the property names as array keys and the property values as array values<type full="Pelago\string" namespace="Pelago" name="string"/></return>
    </docblock>
    <parameter name="cssDeclarationBlock" byreference="false" type="{unknown}"/>
  </method>
</class>
